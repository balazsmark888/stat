function ex1()

    X = [3.952241 2.860222 5.215194 1.220518 4.606953 10.252824 6.799664 5.609246 3.788221 3.011185 8.070329 4.168292 6.780196 9.160555 3.518103 5.078720 1.929499 10.751769 3.541869 4.473831 5.792510 5.607468 4.217438 4.462946 8.339821 3.642831 7.279609 5.695514 2.844989 9.985942 5.946699 7.478080 5.394885 1.066680 4.355324 4.618969 2.905277 5.645982 10.152775 4.209155 6.853564 9.093572 5.225132 7.230264 7.853020 4.376204 0.840410 10.300854 6.476261 2.925081 3.880541 4.692139 1.669020 4.643188 4.522673 7.335743 5.819722 3.013667 6.344190 5.288899 2.820781 9.766238 5.382844 7.118218 12.398504 6.245822 0.915517 6.617679 8.134681 3.751822 9.133864 14.204708 4.196502 1.158665 5.591465 8.372645 8.405673 5.182606 2.191622 4.056880 13.581341 4.014740 12.074721 5.899091 1.922143 6.336613 2.881973 3.469720 3.728097 4.276101 6.858539 3.522358 7.161325 1.576738 5.202477 5.903855 1.701053 4.872497 10.890398 5.788025];
    a = 3;
    b = 2;
    n = length(X);
    k = round(1 + log2(n));
    alpha = 0.01;

    N = hist(X,k);
    xmin = min(X);
    xmax = max(X);
    x = linspace(xmin,xmax,k + 1);
    
    index = 1:k;
    p0 = ContinuousCDF(x(index + 1),'gamma',[a,b]) - ContinuousCDF(x(index),'gamma',[a,b])
    
    chi2Value = sum(((N - n .* p0) .^ 2 ) ./ (n .* p0))
    chi2Quantile = chi2inv(1 - alpha, k - 1)
    H = ~(chi2Value < chi2Quantile);
    
    if(~H)
        disp('Gamma');
    else
        disp('Not Gamma');
    end    
end